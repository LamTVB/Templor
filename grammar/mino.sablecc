/* This file is part of Mino.
 *
 * See the NOTICE file distributed with this work for copyright information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Language mino;

Lexer

  id = lower name_char*;
  class_name = upper name_char*;
  field_name = '_' lower name_char*;
  invalid_id = ('_' | lower | upper)+;

  name_char = upper | lower | '_';
  upper = 'A'..'Z';
  lower = 'a'..'z';
  float = number '.' number;
  number = ('0'..'9')+;

  string = Shortest '"' string_char* '"';
  string_char = Any - (#10 | #13);

  blank = ' ' | #13 | #10 | #9;
  comment = Shortest '/*' Any* '*/';

  Token
    invalid_id;

  Ignored
    blank, comment;

Parser

  file =
    classdefs stms;

  classdefs =
    {more:} classdefs classdef |
    {zero:} ;

  stms =
    {more:} stms stm |
    {zero:} ;

  classdef =
    'class' class_name special_opt '{' members '}';

  special_opt =
    {one:} special |
    {zero:} ;

  members =
    {more:} members member |
    {zero:} ;

  special =
    'special' class_name;

  member =
    {field:} class_name field_name ';' |
    {method:} 'fun' id '(' id_list_opt ')' return_opt '{' stms '}' |
    {operator:} 'fun' operator '(' id_list_opt ')' return_opt '{' stms '}' |
    {primitive_method:} 'primitive' id '(' id_list_opt ')' return_opt ';' |
    {primitive_operator:} 'primitive' operator '(' id_list_opt ')' return_opt ';';

  return_opt =
    {one:} ':' class_name |
    {zero:} ;

  id_list_opt =
    {one:} id_list |
    {zero:} ;

  id_list =
     class_name id additional_ids;

  additional_ids =
    {more:} additional_ids additional_id |
    {zero:} ;

  additional_id =
    ',' class_name id;

  operator =
    {plus:} [plus:]'+' |
    {eq:} [eq:]'==' |
    {not_eq:} [not_eq:]'!=' |
    {lower_than:} [lt:]'<' |
    {lower_than_equal:} [lte:]'<=' |
    {greater_than:} [gt:]'>' |
    {greater_than_equal:} [gte:]'>=' |
    {min:} [min:] '-' |
    {div:} [div:] '/' |
    {modul:} [modul:] '%' |
    {mult:} [mult:] '*';

  stm =
    {var_assign:} class_name_opt id '=' exp ';' |
    {field_assign:} field_name '=' exp ';' |
    {call:} call ';' |
    {self_call:} self_call ';' |
    {while:} 'while' [l_par:]'(' exp ')' '{' stms '}' |
    {if:} 'if' [l_par:]'(' exp ')' '{' stms '}' else_opt |
    {return:} [return_kwd:]'return' exp_opt ';';

  class_name_opt =
    {one:}class_name |
    {zero:} ;

  exp_opt =
    {one:} exp |
    {zero:} ;

  else_opt =
    {one:} else |
    {zero:} ;

  else =
    'else' '{' stms '}';

  exp =
    {is:} exp 'is' add_exp |
    {eq:} exp [eq:]'==' add_exp |
    {not_eq:} exp [not_eq:]'!=' add_exp |
    {lower_than:} exp [lt:]'<' add_exp |
    {lower_than_equal:} exp [lte:]'<=' add_exp |
    {greater_than:} exp [gt:]'>' add_exp |
    {greater_than_equal:} exp [gte:]'>=' add_exp |
    {isa:} exp 'isa' class_name |
    {simple:} add_exp;

  add_exp =
    {add:} add_exp [plus:]'+' mult_exp |
    {min:} add_exp [min:]'-' mult_exp |
    {simple:} mult_exp;

  mult_exp =
    {div:} mult_exp [div:]'/' left_unary_exp |
    {mult:} mult_exp [mult:]'*' left_unary_exp |
    {modul:} mult_exp [modul:]'%' left_unary_exp |
    {simple:} left_unary_exp;

  left_unary_exp =
    {not:} [not:]'!' left_unary_exp |
    {simple:} right_unary_exp;

  right_unary_exp =
    {call:} call |
    {simple:} term;

  term =
    {self_call:} self_call |
    {par:} '(' exp ')' |
    {new:} [new_kwd:]'new' class_name |
    {field:} field_name |
    {var:} id |
    {num:} number |
    {float:} float |
    {null:} 'null' |
    {self:} 'self' |
    {true:} 'true' |
    {false:} 'false' |
    {string:} string;

  call =
    right_unary_exp '.' id '(' exp_list_opt ')';

  exp_list_opt =
    {one:} exp_list |
    {zero:} ;

  self_call =
    id '(' exp_list_opt ')';

  exp_list =
    exp additional_exps;

  additional_exps =
    additional_exps additional_exp | ;

  additional_exp =
    ',' exp;
