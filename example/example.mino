/* This file is part of Mino.
 *
 * See the NOTICE file distributed with this work for copyright information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class Object {

  fun ==(obj) {
    return self is obj;
  }

  fun !=(obj){
    return !(self == obj);
  }

  fun print(obj) {
    obj.to_s().to_system_out();
  }

  fun to_s() {
    return null;
  }

  primitive abort(message);

  fun assert(cond,message) {
    if (!cond) {
      abort("assertion failed: " + message);
    }
  }
}

class Boolean {

  fun to_s() {
    if(self) {
      return "true";
    }
    return "false";
  }
}

class Integer {


  primitive +(i);
  primitive *(i);
  primitive %(i);
  primitive -(i);
  primitive to_s();
  primitive /(i);
}

class String {

  fun to_s() {
    return self;
  }

  primitive +(s);
  primitive to_system_out();
}

class Float{
    primitive +(f);
    primitive -(f);
    primitive *(f);
    primitive /(f);
    primitive to_s();
}

class A {
  fun m() {
    print("I'm in class A.");
  }
}

class B {
  fun m() {
    print("I'm in class B.");
  }
}

class Person {
  var _name;
  var _age;

  /* method that plays the role of a constructor */
  fun init(name, age) {
    assert(!(name is null), "name must not be null");
    assert(name isa String, "name must be a String");
    assert(!(age is null), "age must not be null");
    assert(age isa Integer, "age must be an Integer");
    _name = name;
    _age = age;
    return self; /* to allow call chaining */
  }

  fun to_s() {
    return "name: " + _name + ", age: " + _age.to_s();
  }

  fun <(person){
     assert(person isa Person, "person must be a Person");
     return _age < person.getAge();
  }

  fun getName(){
    return _name;
  }

  fun getAge(){
    return _age;
  }
}

class Array{

}

a = 2.2;
b = 3.3;
c = 10.1;
f = 12 % 5;

b = b + a;
a = b - a;
d = a * 2;
e = b / 2;
g = 1.3;
g = g + 1;

first_person = new Person.init("Jean", 27);
second_person = new Person.init("Pierre", 22);
third_person = new Person.init("Jacques", 32);

array[] = ["Test1", "test2", "Test3"];

foreach(person in array){

}



if(first_person < second_person){
    print(first_person.getName() + " est plus jeune que " + second_person.getName());
}else{
    print(first_person.getName() + " est plus vieux que " + second_person.getName());
}

print("HELLO world.");
print("test" + 21 + "test" + "test" + "test" + 21);
print(21 + "test" + 21 + 21 + 21 + "test");

print("1*156*2*0 = " + 1*156/2*0);
print("4+2+1+2*3 = " + 2+1+2*3); /* 216 */
print("4+2+1+2*3 = " + (2+1+2*3)); /* 9 */

print(1+2+23/2+56);

print("a < b " + (a > b));
print("b >= a " + (b <= a));
print("d > e " + (d < e));
print("e < b " + (e > b));
print("a != b " + (a != b));
print("Jean != Pierre : " + (first_person != second_person));

print("a = " + a);
print("b = " + b);
print("d = " + d);
print("e = " + e);
print("f = " + f);
print("g = " + g);

print(new Person.init("Joe",21));

i = 0;
while(!(i == 2)) {
  if(i == 0) {
    o = new A;
  }
  else {
    o = new B;
  }
  o.m();
  i = i + 1;
}
print(i);
/* o.k(); /* runtime error expected */
